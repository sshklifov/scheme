Кратка документация на кода:
===================================================================================================

Файл Map.hs: Съдържа дефиниция на структура данни речник. С нея правим оценка на свободни
промениливи. При <define 'име' 'терм'> в речника добавяме нов елемент с ключ='име' и
стойност='терм'.
---------------------------------------------------------------------------------------------------

Файл Parser.hs: Служи за построяване на дърво на извод. Всеки елемент е или атом, или терм.
---------------------------------------------------------------------------------------------------

Файл ScmVal.hs: Дефинира тип от scheme. Понеже типовете в scheme са полиморфни, ни трябва тип в
haskell, чрез който да симулираме полиморфност. Съдържа методи за принтиране и също така за четене
(от символен низ). Четенето става с помощта на 'Parser.hs'.
---------------------------------------------------------------------------------------------------

Файл ScmEval.hs: При подаден терм (тип ScmVal) и среда, я която се изчислява, го оценява.
Специалните форми са обособени в началото. Няколко от правилата за оценяване са синтактична захар.
За оценяването на термове се използват среди, както в scheme. Garbage collection не е
имплементиран.
---------------------------------------------------------------------------------------------------

Файл ScmPrimitives.hs: Съдържа примитивни функции, вградени в езика (събиране, изваждане, т.н.).
---------------------------------------------------------------------------------------------------

Файл Main.hs: При подадени 0 аргументи изпълнява Read-Eval-Print-Loop. При подаден 1 аргумент
интерпретира файл, името на което е този аргумент.
===================================================================================================
